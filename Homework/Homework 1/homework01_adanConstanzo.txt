--4 pts) Write a recursive method to compute m(i) = 1 + 1/2 + 1/3, ... + 1/i, where i is an Int
doMath1 1 = 1
doMath1 x = (1 / x) + doMath1(x-1)


--Note: you can use from Integral for operations involving both ints and floats for any of the problems.

--4 pts) Write a recursive method to compute m(i) = 1/2, + 2/3, ... + i/(i + 1), where i is an Int
doMath2 1 = 1/2
doMath2 x = ( x/ (x+1) ) + doMath2(x-1)

--4 pts) Using recursion, implement a method that removes the max element from a list of Ints, 
--or one of the max elements if there is more than one. E.g., [11, 222, 222, 34, 4] should become [11, 222, 34, 4]
removeMax::[Int]->[Int]
removeMax [] = []
removeMax (x:xs)
  | x == maximum (x:xs) = (xs)
  | otherwise =  x : removeMax(xs)

--8 pts) Implement a sorting algorithm that finds the max, puts it at the end of the list, 
--then recursively sorts the remainder of the list. You can create/use any helper functions you need, 
--provide that you wrote it yourself, or it's built into Haskell.
sortIt::[Int]->[Int]
sortIt [] = []
sortIt (x:xs) = sortIt(removeMax(x:xs)) ++ [maximum(x:xs)]
